podTemplate(label: 'builder',
            imagePullSecrets: [ 'registry-secret' ],
            containers: [
                    containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
            ],
            volumes: [
                    hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
                    hostPathVolume(hostPath: '/home/jenkins/agent/workspace/deploy-applications/client', mountPath: '/home/jenkins/agent/workspace/deploy-applications/client'),
            ]) {

        node('builder') {
            stage('Checkout') {
                checkout scm
            }

            stage('Build'){
                withCredentials([file(credentialsId: 'ARES_MINIKUBE_CONFIG', variable: 'ARES_MINIKUBE_CONFIG')]){
                  container('docker') {
                    sh 'echo Building Docker Image...'
                    sh 'docker build -f ./jenkins/cicd/dockerfiles/Dockerfile.deploy-applications -t deploy-applications:latest --build-arg ARES_MINIKUBE_CONFIG=$ARES_MINIKUBE_CONFIG jenkins/cicd/'
                  }
                }
            }

            stage('Run') {
                withCredentials([file(credentialsId: 'ARES_MINIKUBE_CONFIG', variable: 'ARES_MINIKUBE_CONFIG')]) {
                    container('docker') {

                        sh 'echo stage-run directory content'
                        sh 'pwd'
                        sh 'ls -a'

                        sh "mkdir jenkins/cicd/root/.kube && echo '$ARES_MINIKUBE_CONFIG' > jenkins/cicd/root/.kube/config"

                        sh 'echo stage-run kube content'
                        sh 'ls -a jenkins/cicd/root/.kube'

                        sh 'echo stage-run content of config'
                        sh 'cat jenkins/cicd/root/.kube/config'

                        sh 'echo Running Docker Image...'
                        sh 'docker run -e PROJECTS=$PROJECTS -e ENVIRONMENT=$ENVIRONMENT -e BRANCH=$BRANCH -v "$(pwd)/client":/root/client -v /var/run/docker.sock:/var/run/docker.sock -t --rm deploy-applications:latest'
                    }
                }
            }
        }
    }
